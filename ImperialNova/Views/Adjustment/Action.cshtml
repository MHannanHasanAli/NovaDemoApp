﻿@model ImperialNova.ViewModels.AdjustmentActionViewModel
@{
    ViewBag.Title = "Action";
}
<head>
    <link href="~/Content/autocomplete/content/styles.css" rel="stylesheet" />

    <script type="text/javascript" src="~/Content/autocomplete/src/jquery.autocomplete.js"></script>

</head>
<style>
    #_Date, #_Tracking {
        margin-top: 1px;
    }

    .product-box input {
        margin-inline: auto;
    }

    #autocomplete {
        font-size: 12px;
        width: 400px;
    }
    #_Remarks {
        margin-top: 1px;
    }
</style>
<div class="card">

    <div class="card-body">
        @if (Model._Id != 0)
        {
            <h2 class="card-title">
                Edit Inventory Adjustment
            </h2>

        }
        else
        {
            <h2 class="card-title">
                Add Inventory Adjustment
            </h2>

        }
        <br /><br />
        <form id="actionForm">
            <div class="row">
                <div class="col-md-3">
                    <div class="form-group">
                        <input type="hidden" value="@Model._Id" name="ID" />
                        <label for="_Date">Date:</label>
                        <input value="@Model._Date" type="date" class="form-control" name="_Date" id="_Date" placeholder="Enter cost" />
                    </div>
                </div>
                
                <div class="col-md-9">
                    <label for="_Remarks">Remarks:</label>
                    <input value="@Model._Remarks" type="number" class="form-control" name="_Remarks" id="_Remarks" />

                </div>
               
            </div>

            <div class="product-box">
                <input type="text" name="product" autocomplete="off" id="autocomplete" class="autocomplete" placeholder="Search Product here" />
            </div>
            <div id="selection"></div>

            <div class="row">
                <div class="col-md-12 table-responsive">
                    <table class="table" id="ProductsTable">
                        <thead>
                            <tr>
                                <th>
                                    Photo
                                </th>
                                <th>
                                    SKU
                                </th>
                                <th>
                                    Title
                                </th>
                                <th>
                                    Qty
                                </th>

                                @*@if (User.IsInRole("Admin"))
                                    {
                                        <th>
                                            Cost Price
                                        </th>
                                        <th>
                                            Retail Price
                                        </th>
                                    }*@
                                

                            </tr>
                        </thead>
                        <tbody>
                        </tbody>
                    </table>

                </div>
            </div>
        </form>

    </div>

    <div class="errorDiv">

    </div>



    <div style="background-color:white;" class="card-footer">

        <button id="actionButton" type="button" class="btn btn-primary btn-sm btn-rounded"><i class="fas fa-save mr-1"></i> SAVE STOCK</button>
        <a href="@Url.Action("Index","Adjustment")" class="btn btn-secondary btn-sm btn-rounded" data-dismiss="modal"><i class="fas fa-times mr-1"></i> Close</a>
    </div>


</div>

<script type="text/javascript" src="~/Content/autocomplete/src/jquery.autocomplete.js"></script>

@if (User.IsInRole("Admin"))
{
    <script>

   $(function () {
       $("#autocomplete").autocomplete({
           alert("Autocomplete Activated");
            source: function (request, response) {
                $.ajax({
                    url: "@Url.Action("GetProductInJson", "Order")",
                    type: "GET",
                    dataType: "json",
                    data: { term: request.term },
                    success: function (data) {
                        response(data);
                    }
                });
            },
            minLength: 1, // Minimum characters to trigger autocomplete
        });
    });
            function dropdownfiller() {
                var selectedLocation = $("#_Store").val();
            $.ajax({
                type: "GET",
                url: '@Url.Action("GetProductAdjustmentJson", "Adjustment")',
                data: { location: selectedLocation },
                success: function (response) {
                    populateProductsDropdown(response);
                    console.log("Location updated on the server.");
                },
                error: function (xhr, status, error) {
                    console.error("Error updating location: " + error);
                }
            });
        }

    function populateProductsDropdown(products) {
        var productsDropdown = $("#_ProductId");
        productsDropdown.empty();

        // Add options to the dropdown based on the products data
        products.forEach(function (product) {
            var optionText = `${product._Name} | ${product._Size} | ${product._Color} | Cost: £${product._Cost} | Retail: £${product._RetailPrice} | Available Units: ${product._Quantity}`;

            productsDropdown.append($("<option>", { value: product._ProductId, text: optionText }));
        });
    }
    function appendProductToTable(product,quantityin,store,Notes) {
        var row = `
                <tr>
                    <td>${product._Id}</td>
                    <td>${product._SKU}</td>
                    <td>${product._Size}</td>
                    <td>${product._Color}</td>
                    <td>£${product._Cost}</td>
                    <td>£${product._RetailPrice}</td>
                    <td>${quantityin}</td>
                    <td>${product._QuantityOut}</td>
                    <td>${Notes}</td>
                    <td>${store}</td>
                    <td hidden>${product._CategoryId}</td>
                    <td></td>
                </tr>
            `;

        $('#ProductsTable tbody').append(row);
    }



    $("#AdddToTableBtn").click(function () {
        var ProductID = $("#_ProductId").val();
        var QuantityIn = $("#_QuantityIn").val();
        var Store = $("#_Store").val();
        var Notes = $('#_Notes').val();

        $.ajax({
            url: '@Url.Action("GetProductJson", "Adjustment")',  // Replace with the actual URL of your controller
            method: 'GET',
            data: { ID: ProductID },
            success: function (data) {
                appendProductToTable(data, QuantityIn,Store,Notes);


            },
            error: function () {
                $('#productDetails').html('<p>Failed to fetch product details.</p>');
            }
        });


    });

    $("#actionButton").click(function () {
        var products = [];

        $('#ProductsTable tbody tr').each(function () {

            var product = {
                _ProductId: $(this).find('td:eq(0)').text(),
                _Name: $(this).find('td:eq(1)').text(),
                _Size: $(this).find('td:eq(2)').text(),
                _Color: $(this).find('td:eq(3)').text(),
                _Cost: $(this).find('td:eq(4)').text(),
                _RetailPrice: $(this).find('td:eq(5)').text(),
                _QuantityIn: $(this).find('td:eq(6)').text(),
                _QuantityOut: $(this).find('td:eq(7)').text(),
                _Notes: $(this).find('td:eq(8)').text(),
                _Store: $(this).find('td:eq(9)').text(),
                _CategoryId: $(this).find('td:eq(10)').text()
            };


            products.push(product);
        });
        var productsJson = JSON.stringify(products);


		$.ajax({
			url: '@Url.Action("Action", "Adjustment")',
			type: "post",
            data: { products: productsJson }, // Send serialized string as parameter
        })
            .done(function (response) {
			if(response.success)
			{
				window.location.href = "@Url.Action("Index", "Adjustment")";
			}
			else {
				$(".errorDiv").html(response.Message);
			}
		});
    });

    $("#PhotoUpload").change(function () {

        var element = this;
        var formData = new FormData();

        var totalFiles = element.files.length;

        for (var i = 0; i < totalFiles; i++) {
            var file = element.files[i];
            formData.append("Photo", file);
        }

        $.ajax({
            type: 'POST',
            url: '@Url.Action("UploadPhotos", "Shared")',
            data: formData,
            dataType: 'json',
            contentType: false,
            processData: false
        })
            .done(function (response) {

                console.log(response);
                if (response.Success) {
                    $("#Photo").val(response.DocURL);
                    $("#PhotoImg").attr("src", response.DocURL);

                }

            })
            .fail(function (XMLHttpRequest, textStatus, errorThrown) {
                alert("FAIL");
            })
    });
        function initializeAutocompleteForCustomers() {
        $.ajax({
            url: '@Url.Action("GetProductInJson", "Order")',
            type: 'GET',
            dataType: 'json',
            success: function (data) {
                var lookup = [];

                // Iterate through the ServiceModel items
                data.forEach(function (product) {
                    lookup.push({
                        value: product._Id,
                        ProductPhoto: product._Photo,
                        ProductName: product._Name,
                        ProductSKU: product._SKU,
                        //CustomerEmail: customer.Email,
                        //CustomerMobileNumber: customer.MobileNumber,
                        //data: {
                        //    id: customer.ID // Add the service.ID to data
                        //}
                    });

                });

                $('.autocomplete').devbridgeAutocomplete({
                    lookup: lookup,
                    minChars: 1,
                    formatResult: function (suggestion, currentValue) {
                        // Customize the rendering of each suggestion

                        return '<table class="table table-hovered">' +
                            '<tbody>' +
                            '<tr>' +
                            '<td class="suggestion-initial">' +
                            '<div class="circular-box">' + suggestion.CustomerInitials + '</div>' +
                            '</td>' +
                            '<td class="suggestion-details">' +
                            '<div class="customer-name">' + suggestion.CustomerName + '</div>' +
                            '<div class="customer-email">' + suggestion.CustomerEmail + '</div>' +
                            '<div class="customer-mobile">' + suggestion.CustomerMobileNumber + '</div>' +
                            '</td>' +
                            '</tr>' +
                            '</tbody>' +
                            '</table>';
                    },
                    onSelect: function (suggestion) {
                        var selectedCustomerID = suggestion.data.id;
                        console.log(selectedCustomerID);
                        var $inputElement = $(this);

                        $.ajax({
                            url: '@Url.Action("GetCustomerDetails", "Appointment")', // Replace with your controller action URL
                            type: 'GET',
                            dataType: 'json',
                            data: { ID: selectedCustomerID }, // Pass the selectedServiceId as a parameter
                            success: function (customer) {
                                console.log("customer Details" + customer);
                                $("#MainCustomerSelectedContainer").empty();
                                var DivToBeAdded = '<div class="suggestion-container">' +
                                    '<button  style="float:right;" onclick="ClearTheCustomer()" type="button" class="close-button" aria-label="Close">' +
                                    '<span aria-hidden="true">&times;</span>' +
                                    '</button>' +
                                    '<table class="table table-hovered">' +
                                    '<tbody>' +
                                    '<tr>' +
                                    '<td class="suggestion-initial">' +
                                    '<div class="circular-box">' + customer.FirstName.charAt(0) + customer.LastName.charAt(0) + '</div>' +
                                    '</td>' +
                                    '<td class="suggestion-details">' +
                                    '<input type="hidden" name="CustomerID" id="CustomerID" value='+customer.ID+' class="customer-id">'+
                                    '<div class="customer-name">' + customer.FirstName + " " + customer.LastName + '</div>' +
                                    '<div class="customer-email">' + customer.Email + '</div>' +
                                    '<div class="customer-mobile">' + customer.MobileNumber + '</div>' +
                                    '</td>' +
                                    '</tr>' +
                                    '</tbody>' +
                                    '</table>' +
                                    '</div>';

                                $("#MainCustomerSelectedContainer").append(DivToBeAdded);


                            },
                            error: function (error) {
                                console.error('Error fetching service details:', error);
                            }
                        });
                        // Now you can access the selected service ID (selectedServiceId)
                        // and use it as needed.
                    },
                    showNoSuggestionNotice: true,
                    noSuggestionNotice: 'Sorry, no matching results'
                });
            },
            error: function (error) {
                console.error('Error fetching data:', error);
            }
        });
    }

    </script>
}
else
{
<script>

    $(document).ready(function () {



    });
            function dropdownfiller() {
                var selectedLocation = $("#_Store").val();
            $.ajax({
                type: "GET",
                url: '@Url.Action("GetProductAdjustmentJson", "Adjustment")',
                data: { location: selectedLocation },
                success: function (response) {
                    populateProductsDropdown(response);
                    console.log("Location updated on the server.");
                },
                error: function (xhr, status, error) {
                    console.error("Error updating location: " + error);
                }
            });
        }

    function populateProductsDropdown(products) {

        var productsDropdown = $("#_ProductId");
        productsDropdown.empty();

        // Add options to the dropdown based on the products data
        products.forEach(function (product) {

            var optionText = `${product._Name} | ${product._Size} | ${product._Color} | Available Units: ${product._Quantity}`;

            productsDropdown.append($("<option>", { value: product._ProductId, text: optionText }));
        });
    }
    function appendProductToTable(product,quantityin,store,Notes) {
        var row = `
                <tr>
                    <td>${product._Id}</td>
                    <td>${product._Name}</td>
                    <td>${product._Size}</td>
                    <td>${product._Color}</td>
                    <td hidden>£${product._Cost}</td>
                    <td hidden>£${product._RetailPrice}</td>
                    <td>${quantityin}</td>
                    <td>${product._QuantityOut}</td>
                    <td>${Notes}</td>
                    <td>${store}</td>
                    <td hidden>${product._CategoryId}</td>
                    <td></td>
                </tr>
            `;

        $('#ProductsTable tbody').append(row);
    }



    $("#AdddToTableBtn").click(function () {
        var ProductID = $("#_ProductId").val();
        var QuantityIn = $("#_QuantityIn").val();
        var Store = $("#_Store").val();
        var Notes = $('#_Notes').val();
        $.ajax({
            url: '@Url.Action("GetProductJson", "Adjustment")',  // Replace with the actual URL of your controller
            method: 'GET',
            data: { ID: ProductID },
            success: function (data) {
                appendProductToTable(data, QuantityIn,Store,Notes);


            },
            error: function () {
                $('#productDetails').html('<p>Failed to fetch product details.</p>');
            }
        });


    });

    $("#actionButton").click(function () {
        var products = [];

        $('#ProductsTable tbody tr').each(function () {

            var product = {
                _ProductId: $(this).find('td:eq(0)').text(),
                _Name: $(this).find('td:eq(1)').text(),
                _Size: $(this).find('td:eq(2)').text(),
                _Color: $(this).find('td:eq(3)').text(),
                _Cost: $(this).find('td:eq(4)').text(),
                _RetailPrice: $(this).find('td:eq(5)').text(),
                _QuantityIn: $(this).find('td:eq(6)').text(),
                _QuantityOut: $(this).find('td:eq(7)').text(),
                _Notes: $(this).find('td:eq(8)').text(),
                _Store: $(this).find('td:eq(9)').text(),
                _CategoryId: $(this).find('td:eq(10)').text()
            };


            products.push(product);
        });
        var productsJson = JSON.stringify(products);


		$.ajax({
			url: '@Url.Action("Action", "Adjustment")',
			type: "post",
            data: { products: productsJson }, // Send serialized string as parameter
        })
            .done(function (response) {
			if(response.success)
			{
				window.location.href = "@Url.Action("Index", "Adjustment")";
			}
			else {
				$(".errorDiv").html(response.Message);
			}
		});
    });

    $("#PhotoUpload").change(function () {

        var element = this;
        var formData = new FormData();

        var totalFiles = element.files.length;

        for (var i = 0; i < totalFiles; i++) {
            var file = element.files[i];
            formData.append("Photo", file);
        }

        $.ajax({
            type: 'POST',
            url: '@Url.Action("UploadPhotos", "Shared")',
            data: formData,
            dataType: 'json',
            contentType: false,
            processData: false
        })
            .done(function (response) {

                console.log(response);
                if (response.Success) {
                    $("#Photo").val(response.DocURL);
                    $("#PhotoImg").attr("src", response.DocURL);

                }

            })
            .fail(function (XMLHttpRequest, textStatus, errorThrown) {
                alert("FAIL");
            })
    });
</script>
}